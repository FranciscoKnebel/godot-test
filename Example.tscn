[gd_scene load_steps=13 format=2]

[sub_resource type="GDScript" id=9]
script/source = "extends Camera
class_name CameraController

enum CAMERA_ACTIONS{
	MOVING,
	ROTATING_VIEW,
}

export(float,1,100) var movement_speed = 30
export(float,0.01,0.99) var movement_damping = 0.74

#Value in percentage of screen portion
#A value of 0.3 means that when you place the cursor 30% or less away from an edge it will start pushing the camera
export(float, 0.0,1.0) var edge_size = 0.0

#EDIT HERE--->**,***<--- ZOOM MIN AND MAX LIMITS
export(float, 10,100) var min_zoom = 10
export(float, 10,100) var max_zoom = 100

export(float, 1,3) var zoom_sensibility = 2.5

export(float, 1,3) var rotation_sensibility = 2.3

var pitch : float
var yaw : float
var current_action = CAMERA_ACTIONS.MOVING
var velocity : Vector2

func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CONFINED)
	
	pitch = rotation.x
	yaw = rotation.y

func change_action(action):
	current_action = action
	match(current_action):
		CAMERA_ACTIONS.MOVING:
			Input.set_mouse_mode(Input.MOUSE_MODE_CONFINED)
		CAMERA_ACTIONS.ROTATING_VIEW:
			Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _process(delta):
	
	match(current_action):
		CAMERA_ACTIONS.MOVING:
			#CAMERA MOVEMENT
			velocity.x = clamp(velocity.x * movement_damping,-1.0,1.0)
			velocity.y = clamp(velocity.y * movement_damping,-1.0,1.0)
			
			if velocity != Vector2.ZERO:
				move(velocity)

func change_velocity(_velocity : Vector2):
	velocity = _velocity
	
func move(_velocity : Vector2):
	#Move along cameras X axis
	global_transform.origin += global_transform.basis.x * velocity.x * movement_speed * get_process_delta_time()
	#Calculate a forward camera direction that is perpendicular to the XZ plane
	var forward = global_transform.basis.x.cross(Vector3.UP)
	#Move the camera along that forward direction
	global_transform.origin += forward * velocity.y * movement_speed * get_process_delta_time()


func zoom(direction : float):
	#Zooming using fov
	var new_fov = fov + (sign(direction) * pow(abs(direction),zoom_sensibility)/100 * get_process_delta_time())
	fov = clamp(new_fov,min_zoom,max_zoom)


func rotate_view(axis : Vector2):
	
	var pitch_rotation_amount = -axis.y/100 * get_process_delta_time() * rotation_sensibility
	var yaw_rotation_amount = -axis.x/100 * get_process_delta_time() * rotation_sensibility
	
	pitch += pitch_rotation_amount
	pitch = clamp(pitch,-PI/2,0)
	
	yaw += yaw_rotation_amount
	
	rotation.x = pitch
	rotation.y = yaw
"

[sub_resource type="GDScript" id=10]
script/source = "extends Node

export(float,0.001,1.0) var screen_edge_size : float = 0.3
export(float) var mouse_wheel_damping = 0.9

#USED TO CALCULATE RAW MOVEMENT WHILE PUSHING AN EDGE
var horizontal : float = 0.0
var vertical : float = 0.0

#USED TO STORE MOUSE WHEEL INERTIA TO ENABLE SMOOTH STOPPING
var mouse_wheel : float  = 0.0

signal on_change_velocity(velocity)
signal on_rotate_view(relative)
signal on_change_action(new_state)
signal on_zoom(value)

var current_action

#TOUCH VARIABLE FOR MOBILE
var touch_count : int = 0
var swipe_start : Vector2

func _ready():
	connect(\"on_change_action\",self,\"change_action\")
	emit_signal(\"on_change_action\",CameraController.CAMERA_ACTIONS.MOVING)

func change_action(action):
	current_action = action
	
func toggle_action():
	current_action = 1 - current_action

func start_swipe(position : Vector2):
	swipe_start = position

func move_swipe(position : Vector2):
	if blocked_movement:
		return
		
	var delta = (position - swipe_start)*-1
	var direction_x = sign(delta.x)
	var direction_y = sign(delta.y)
	
	var view_size = get_viewport().get_visible_rect().size - Vector2.ONE
	
	horizontal = range_lerp(abs(delta.x),0,view_size.x,0.0,1.0)
	vertical = range_lerp(abs(delta.y),0,view_size.y,0.0,1.0)
	
	#Applies direction
	horizontal *= direction_x
	vertical *= direction_y
	
var touches = [ Vector2.ZERO, Vector2.ZERO ]
var start_pinch_distance : float
var last_pinch_distance : float
var pinching : float

var blocked_movement : bool = false

func _input(event):
	
	if OS.get_name() == \"Android\" or OS.get_name() == \"iOS\":
		#MOBILE##############
		if event is InputEventScreenTouch:
			#SET TOUCH STARTING POSTIION
			touches[event.index] = event.position
			if event.pressed:
				touch_count += 1
				start_swipe(event.position)
			else:
				touch_count -= 1
				#RENABLE SWIPE MOVEMENT BECAUSE EVERY TOUCH WAS LIFTED
				if blocked_movement and touch_count <= 0:
					blocked_movement = false
			
			#RESET PINCHING VALUE WHEN A NEW TOUCH IS DETECTED OR HAS BEEN LIFTED
			pinching = 0.0
			if touch_count == 2:
				#STARTED ZOOMING, BLOCK MOVEMENT UNTIL EVERY TOUCH IS LIFTED
				blocked_movement = true
				start_pinch_distance = (touches[1] - touches[0]).length()
				
		if event is InputEventScreenDrag:
			if touch_count == 2:
				#UPDATE TOUCHES POSITIONS
				touches[event.index] = event.position
				#CALCULATE DISTANCE BETWEEN TOUCHES
				var pinch_distance = (touches[1] - touches[0]).length()
				var pinch_direction = 1 if pinch_distance > last_pinch_distance else -1
				#CALCULATE PINCH DELTA
				pinching = abs(start_pinch_distance - pinch_distance) * pinch_direction
				#USE MOUSE WHEEL BUFFER TO ENABLE SMOOTHING
				mouse_wheel += pinching * get_process_delta_time()
				last_pinch_distance = pinch_distance
			else:
				if current_action == CameraController.CAMERA_ACTIONS.MOVING:
					move_swipe(event.position)
				elif current_action == CameraController.CAMERA_ACTIONS.ROTATING_VIEW:
					emit_signal(\"on_rotate_view\",event.relative)
					
		###############MOBILE
	else:
	#PC##################
	#Camera edge pushing
		if event is InputEventMouseMotion:
			#ROTATE VIEW
			if current_action == CameraController.CAMERA_ACTIONS.ROTATING_VIEW:
				emit_signal(\"on_rotate_view\",event.relative)
			#Gets screen size
			var view_size = get_viewport().get_visible_rect().size - Vector2.ONE
			#Get mouse position in percentage values relative to the screen
			var delta = (event.position) / view_size
			#Convert it to a range between [-1,1]
			delta = (delta * 2) - Vector2.ONE
			
			if current_action == CameraController.CAMERA_ACTIONS.MOVING:
				#Store it an buffer to use it on _process
				#Calculates delta based on percentage between the edge size and the actual edge
				horizontal = max(abs(delta.x) - (1.0 - screen_edge_size),0)
				vertical = max(abs(delta.y) - (1.0 - screen_edge_size),0)
				#Converts it to an [0.0,1.0] range
				horizontal = range_lerp(horizontal,0.0,screen_edge_size,0.0,1.0)
				vertical = range_lerp(vertical,0.0,screen_edge_size,0.0,1.0)
				#Applies direction
				horizontal *= sign(delta.x)
				vertical *= sign(delta.y)
			elif current_action == CameraController.CAMERA_ACTIONS.ROTATING_VIEW:
				horizontal = delta.x
				vertical = delta.y
				pass
			
		
		if event is InputEventMouseButton:
			#WHEEL SCROLL
			if event.button_index == BUTTON_WHEEL_UP or event.button_index == BUTTON_WHEEL_DOWN:
				if event.pressed and not event.is_echo():
					var direction = (-1 if event.button_index == BUTTON_WHEEL_UP else 0) + (1 if event.button_index == BUTTON_WHEEL_DOWN else 0)
					mouse_wheel += direction * get_process_delta_time() * 1000
	###################PC
				
func _process(delta):
	
	#PC######
	if Input.is_action_just_pressed(\"ToggleCameraAction\"):
		emit_signal(\"on_change_action\",CameraController.CAMERA_ACTIONS.ROTATING_VIEW)
	elif Input.is_action_just_released(\"ToggleCameraAction\"):
		emit_signal(\"on_change_action\",CameraController.CAMERA_ACTIONS.MOVING)
		
	match(current_action):
		CameraController.CAMERA_ACTIONS.MOVING:
			#RESIDUAL MOVEMENT
			if horizontal != 0 or vertical != 0:
				emit_signal(\"on_change_velocity\",Vector2(horizontal, vertical))
		
	#MOUSE WHEEL
	if mouse_wheel != 0:
		mouse_wheel = mouse_wheel * mouse_wheel_damping
		emit_signal(\"on_zoom\",mouse_wheel)
	#######PC
	
	
	
"

[sub_resource type="PlaneMesh" id=1]

[sub_resource type="SpatialMaterial" id=2]
albedo_color = Color( 0.75, 0.531605, 0.269531, 1 )

[sub_resource type="CubeMesh" id=3]

[sub_resource type="SpatialMaterial" id=4]
albedo_color = Color( 0.423529, 0.45098, 0.47451, 1 )

[sub_resource type="PrismMesh" id=5]

[sub_resource type="SpatialMaterial" id=6]
albedo_color = Color( 0.584314, 0.403922, 0.403922, 1 )

[sub_resource type="CylinderMesh" id=7]

[sub_resource type="SpatialMaterial" id=8]
albedo_color = Color( 0.627451, 0.611765, 0.341176, 1 )

[sub_resource type="GDScript" id=11]
script/source = "extends Label

export(NodePath) var target_path

var target_spatial

func _ready():
	target_spatial = get_node(target_path)

func _process(delta):
	text = \"\"\"FPS: %s\"\"\" % [
				ceil(1/delta)
				]
"

[sub_resource type="GDScript" id=12]
script/source = "extends Node

export(NodePath) var camera_controller_path

var camera_controller

onready var movement_speed_label = $MovementSpeedLabel
onready var movement_damping_label = $MovementDampingLabel
onready var zoom_sensibility_label = $ZoomSensibilityLabel
onready var rotation_sensibility_label = $RotationSensibilityLabel

onready var movement_speed_slider = $MovementSpeed
onready var movement_damping_slider = $MovementDamping
onready var zoom_sensibility_slider = $ZoomSensibility
onready var rotation_sensibility_slider = $RotationSensibility

func _ready():
	camera_controller = get_node(camera_controller_path)
	
	set_movement_speed_text(camera_controller.movement_speed)
	movement_speed_slider.value = camera_controller.movement_speed
	movement_speed_slider.connect(\"value_changed\",self,\"change_movement_speed\")
	
	set_movement_damping_text(camera_controller.movement_damping)
	movement_damping_slider.value = camera_controller.movement_damping
	movement_damping_slider.connect(\"value_changed\",self,\"change_movement_damping\")
	
	set_zoom_sensibility_text(camera_controller.zoom_sensibility)
	zoom_sensibility_slider.value = camera_controller.zoom_sensibility
	zoom_sensibility_slider.connect(\"value_changed\",self,\"change_zoom_sensibility\")
	
	set_rotation_sensibility_text(camera_controller.rotation_sensibility)
	rotation_sensibility_slider.value = camera_controller.rotation_sensibility
	rotation_sensibility_slider.connect(\"value_changed\",self,\"change_rotation_sensibility\")
	
func change_movement_speed(value : float):
	camera_controller.movement_speed = value
	set_movement_speed_text(value)
	
func change_movement_damping(value : float):
	camera_controller.movement_damping = value
	set_movement_damping_text(value)
	
func change_zoom_sensibility(value : float):
	camera_controller.zoom_sensibility = value
	set_zoom_sensibility_text(value)
	
func change_rotation_sensibility(value : float):
	camera_controller.rotation_sensibility = value
	set_rotation_sensibility_text(value)

func set_movement_speed_text(value : float):
	movement_speed_label.text = \"Movement Speed: %s\" % value
func set_movement_damping_text(value : float):
	movement_damping_label.text = \"Movement Damping: %s\" % value
func set_zoom_sensibility_text(value : float):
	zoom_sensibility_label.text = \"Zoom Sensibility: %s\" % value
func set_rotation_sensibility_text(value : float):
	rotation_sensibility_label.text = \"Rotation Sensibility: %s\" % value
"

[node name="Spatial" type="Spatial"]

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.707107, 0.707107, 0, -0.707107, 0.707107, 0, 5, 3 )
script = SubResource( 9 )
edge_size = 0.317

[node name="Node" type="Node" parent="Camera"]
script = SubResource( 10 )
screen_edge_size = 0.001

[node name="Ground" type="MeshInstance" parent="."]
transform = Transform( 7.06863, 0, 0, 0, 7.06863, 0, 0, 0, 7.06863, 0, 0, 0 )
mesh = SubResource( 1 )
material/0 = SubResource( 2 )

[node name="Cube" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -4, 0.613412, 3 )
mesh = SubResource( 3 )
material/0 = SubResource( 4 )

[node name="Prism" type="MeshInstance" parent="."]
transform = Transform( 1.57587, 0, -0.607515, 0, 1, 0, 1.20528, 0, 0.794309, 2.81214, 0.845921, 3.64135 )
mesh = SubResource( 5 )
material/0 = SubResource( 6 )

[node name="Cylinder" type="MeshInstance" parent="."]
transform = Transform( 0.794309, 0, -0.607515, 0, 1, 0, 0.607515, 0, 0.794309, 0.155452, 0.771111, -2.76694 )
mesh = SubResource( 7 )
material/0 = SubResource( 8 )

[node name="Label" type="Label" parent="."]
margin_right = 191.0
margin_bottom = 42.0
text = "Rotation:"
script = SubResource( 11 )
__meta__ = {
"_edit_use_anchors_": false
}
target_path = NodePath("../Camera")

[node name="Control" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -1024.0
margin_bottom = -600.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Panel" type="Panel" parent="Control"]
self_modulate = Color( 1, 1, 1, 0.298039 )
margin_left = 704.0
margin_top = 64.0
margin_right = 960.0
margin_bottom = 208.0
script = SubResource( 12 )
__meta__ = {
"_edit_use_anchors_": false
}
camera_controller_path = NodePath("../../Camera")

[node name="MovementSpeedLabel" type="Label" parent="Control/Panel"]
margin_left = 8.0
margin_top = 8.0
margin_right = 248.0
margin_bottom = 22.0
text = "Movement Speed"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MovementSpeed" type="HSlider" parent="Control/Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 8.0
margin_top = 24.0
margin_right = -8.0
margin_bottom = -160.0
min_value = 1.0
step = 0.01
value = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MovementDampingLabel" type="Label" parent="Control/Panel"]
margin_left = 8.0
margin_top = 40.0
margin_right = 248.0
margin_bottom = 54.0
text = "Movement Damping"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MovementDamping" type="HSlider" parent="Control/Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 8.0
margin_top = 56.0
margin_right = -8.0
margin_bottom = -128.0
min_value = 0.01
max_value = 0.99
step = 0.01
value = 0.99
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ZoomSensibilityLabel" type="Label" parent="Control/Panel"]
margin_left = 8.0
margin_top = 72.0
margin_right = 248.0
margin_bottom = 86.0
text = "Zoom Sensibility"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ZoomSensibility" type="HSlider" parent="Control/Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 8.0
margin_top = 88.0
margin_right = -8.0
margin_bottom = -96.0
min_value = 1.0
max_value = 3.0
step = 0.01
value = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="RotationSensibilityLabel" type="Label" parent="Control/Panel"]
margin_left = 8.0
margin_top = 104.0
margin_right = 248.0
margin_bottom = 118.0
text = "Rotation Sensibility"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="RotationSensibility" type="HSlider" parent="Control/Panel"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 8.0
margin_top = 120.0
margin_right = -8.0
margin_bottom = -64.0
min_value = 1.0
max_value = 3.0
step = 0.01
value = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button" type="Button" parent="Control"]
margin_left = 16.0
margin_top = 568.0
margin_right = 69.0
margin_bottom = 588.0
text = "Toggle Move/Rotation(Mobile)"
[connection signal="on_change_action" from="Camera/Node" to="Camera" method="change_action"]
[connection signal="on_change_velocity" from="Camera/Node" to="Camera" method="change_velocity"]
[connection signal="on_rotate_view" from="Camera/Node" to="Camera" method="rotate_view"]
[connection signal="on_zoom" from="Camera/Node" to="Camera" method="zoom"]
